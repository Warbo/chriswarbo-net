#!/usr/bin/env runhaskell

import Control.Applicative
import Data.List
import System.Environment
import System.Exit
import System.IO
import System.Process

-- rebuild

rebuild :: IO ExitCode
rebuild = rawSystem "./site" ["rebuild"]

-- check

watch :: IO ProcessHandle
watch = do dn <- openFile "/dev/null" WriteMode
           p  <- runProcess "./site" ["watch"] Nothing
                                               Nothing
                                               (Just dn)
                                               (Just dn)
                                               (Just dn)
           rawSystem "sleep" ["2"]
           return p

whileWatching :: IO ExitCode -> IO ExitCode
whileWatching x = do p    <- watch
                     code <- x
                     terminateProcess p
                     return code

get404s :: [String] -> [String]
get404s = let start x = "Found "       `isPrefixOf` x &&
                        "broken links" `isInfixOf`  x
              end   x = "FINISHED"     `isPrefixOf` x
           in takeWhile (not . end) . dropWhile (not . start)

crawl :: IO String
crawl = let f (ExitSuccess, _, _) = ""
            f (_,           _, e) = e
         in f <$> readProcessWithExitCode
                      "wget"
                      ["-nd", "--spider", "-e", "robots=off", "-L", "-r", "-p",
                       "http://localhost:8000"] ""

check :: IO ExitCode
check = whileWatching $ do fails <- get404s . lines <$> crawl
                           putStr $ unlines fails
                           return $ if null fails
                                       then ExitSuccess
                                       else ExitFailure 1

-- scp

chain :: [IO ExitCode] -> IO ExitCode
chain []     = return ExitSuccess
chain (f:fs) = do c <- f
                  case c of
                   ExitSuccess   -> chain fs
                   ExitFailure _ -> exitWith c

scp :: IO ExitCode
scp = rawSystem "rsync" ["-e", "ssh", "-r", "-p", "-z", "--info=progress2",
                         "--append", "_site", "chriswarbo.net:~/"]

{-
  let f = "site.tar.gz"
      in  chain [--rawSystem "rm"  [f],
                 --rawSystem "tar" ["czf", f, "_site"],
                 ]
                 --rawSystem "rm"  [f]]
-}

-- update

update :: IO ExitCode
update = rawSystem "ssh" ["-t", "chriswarbo.net", "/home/chris/update.sh"]

-- main

write x =  x

ops :: [(String, IO ExitCode)]
ops = [("rebuild", putStrLn "Rebuilding"     >> rebuild),
       ("check",   putStrLn "Checking links" >> check  ),
       ("copy",    putStrLn "Copying"        >> scp    ),
       ("update",  putStrLn "Updating"       >> update )]

op :: String -> IO ExitCode
op n = maybe (putStr ("Unknown op " ++ n) >> return (ExitFailure 1))
             id
             (lookup n ops)

main = getArgs >>= chain . map op
