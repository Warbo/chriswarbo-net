#!/usr/bin/env bash
set   -e
set   -o pipefail
shopt -s nullglob

if command -v ts > /dev/null && ts | grep queued | grep render > /dev/null
then
    echo "Another render is queued, deferring to that"
    exit 0
fi

# Set default parameter, if none supplied
[[ -n "$IPFS_PATH"    ]] || export IPFS_PATH=/var/lib/ipfs/.ipfs
[[ -n "$GIT_REPO_DIR" ]] || export GIT_REPO_DIR=/home/chris/Programming/repos

function gitVersions() {
    echo "{"
    for D in "$GIT_REPO_DIR"/*.git
    do
        NAME=$(basename "$D" .git)
        REV=$(git ls-remote "$D" HEAD | cut -f1)
        printf '"%s":"%s" ' "$NAME" "$REV"
    done | sed -e 's/ *$//g' -e 's/ /, /g'
    echo "}"
}

REPO_REFS=$(gitVersions)
export REPO_REFS

function build() {
    BASE=$(dirname "$(readlink -f "$0")")
    nix-build --show-trace -A "$1" "$BASE"
}

function doBuild() {
    build wholeSite
}

function addToIpfs() {
    build ipfsHash | tr -d '\n'
}

function pushToIpns() {
    echo "Checking for chriswarbo.net key" 1>&2
    ipfs key list | grep chriswarbonet > /dev/null || {
        echo "Couldn't find key for chriswarbo.net, can't push" 1>&2
        exit 1
    }

    HASHFILE=$(build ipfsHash)
    IPFSHASH=$(cat "$HASHFILE" | tr -d '\n')
    ipfs name publish -k chriswarbonet "$IPFSHASH"
}

function pushToWeb() {
    # Update IPNS key
    pushToIpns

    # Get raw files
    DIR=$(doBuild)

    echo "Pushing '$DIR' to Web root" 1>&2

    # Some explanation of these options:
    #   --ignore-times because Nix sets them all to 1970
    #   --checksum uses file content to determine what's changed, in lieu of the
    #     timestamp
    #   --delete removes any files on the destination which aren't in the source
    #   --progress tells us what it's up to
    #   --copy-unsafe-links causes absolute symlinks (or relative ones pointing
    #     outside the source tree) to be dereferenced and copied as files/dirs
    #   --archive causes directories and (safe) symlinks to be copied, and
    #     permissions, etc. to be preserved
    #   -e forces SSH to use a TTY, so sudo will work
    #   --rsync-path tells us what to run on the remote end, in this case we use
    #     sudo so we've got permission to write to /var/www. NOTE: If you use an
    #     SSH passphrase, this might cause it to be sent in the clear! We use
    #     keys so it's not an issue.
    rsync --checksum --delete --ignore-times --progress --copy-unsafe-links \
          --archive --compress -e "ssh -t" --rsync-path="sudo rsync" \
          "$DIR/" chriswarbo.net:/var/www/html
}

printf "Waiting for rendering lock..." 1>&2
(
  flock -x 200
  printf "lock aquired.\n" 1>&2

  case "$1" in
      build)
          doBuild
          ;;

      add)
          addToIpfs
          ;;

      publish)
          pushToIpns
          ;;

      push)
          pushToWeb
          ;;

      *)
          echo "
Usage: $0 <build|add|publish|push>

build: Builds the HTML, git repos, etc. of the site. Outputs a directory
       containing the result (note, this may take a lot of space!).

add: Adds the site to IPFS, outputting the resulting hash. This may take less
     space than performing a build, since we can re-use existing hashes without
     having to make a copy of the files they refer to.

publish: Performs an add, then attempts to publish the result to IPNS.

push: Performs a publish (and hence an add), then attempts to copy the results
      to the chriswarbo.net server over SSH.
          " 1>&2
          exit 1
          ;;
  esac
) 200>/tmp/blog.lock
