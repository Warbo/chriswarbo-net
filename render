#!/usr/bin/env bash
set   -e
set   -o pipefail
shopt -s nullglob

if command -v ts > /dev/null && ts | grep queued | grep render > /dev/null
then
    echo "Another render is queued, deferring to that"
    exit 0
fi

# We use a lot of recursion, which can overflow the stack, so try increasing it
ulimit -s 100000 || true

function copyToWeb() {
    # Some explanation of these options:
    #   --ignore-times because Nix sets them all to 1970
    #   --checksum uses file content to determine what's changed, in lieu of the
    #     timestamp
    #   --delete removes any files on the destination which aren't in the source
    #   --progress tells us what it's up to
    #   --copy-unsafe-links causes absolute symlinks (or relative ones pointing
    #     outside the source tree) to be dereferenced and copied as files/dirs
    #   --archive causes directories and (safe) symlinks to be copied, and
    #     permissions, etc. to be preserved
    #   -e forces SSH to use a TTY, so sudo will work
    #   --rsync-path tells us what to run on the remote end, in this case we use
    #     sudo so we've got permission to write to /var/www. NOTE: If you use an
    #     SSH passphrase, this might cause it to be sent in the clear! We use
    #     keys so it's not an issue.
    #   --exclude tells rsync to ignore a path, so it won't copy or delete it
    # Note that the trailing / after $DIR will cause its contents to be copied
    rsync --ignore-times --checksum --delete --progress --copy-unsafe-links \
          --archive --compress -e "ssh -t" --rsync-path="sudo rsync"        \
          --exclude /git --exclude /essays --exclude /repos "$@"            \
          "$DIR/" chriswarbo.net:/var/www/html
}

function build() {
    echo "Building '$1'" 1>&2
    nix-build --show-trace -A "$1" static/nix
}

function pushToWeb() {
    # Get raw files
    DIR=$(build wholeSite)

    echo "Pushing '$DIR' to Web root" 1>&2

    # Since all of our timestamps are 1970-01-01, browsers may cache old
    # versions, since the server tells them the last-modified date is the same
    # as they've already seen. To avoid this we'll touch all of the files that
    # get sent across, which we discover here using a dry-run.
    CHANGED=$(copyToWeb -n | grep -v '^sending ' | grep -v 'deleting ')

    copyToWeb

    # Touch all of the files. We pipe across a bash script, since it's quicker
    # than invoking a new connection for each file.
    echo "$CHANGED" | while read -r LINE
    do
        F=$(echo "$LINE" | sed -e "s/'/'\\\''/g")
        echo "cd /var/www/html; sudo touch '$F'"
    done | ssh chriswarbo.net 'bash'

    # Ensure symlinks are in place
    for PAIR in '/opt/git	/var/www/html/git'            \
                '/opt/repopages	/var/www/html/projects/repos' \
                '/var/www/html/projects	/var/www/html/essays' \
                '/var/www/html/projects/repos	/var/www/html/repos'
    do
        SRC=$(echo "$PAIR" | cut -f1)
        DST=$(echo "$PAIR" | cut -f2)
        if ssh chriswarbo.net "test -h '$DST'"
        then
            FOUND=$(ssh chriswarbo.net "readlink '$DST'")
            if [[ "x$FOUND" = "x$SRC" ]]
            then
                true
            else
                echo "WARNING: '$DST' points to '$FOUND', not '$SRC'" 1>&2
            fi
        else
            echo "WARNING: '$DST' is not a symlink to '$SRC'" 1>&2
        fi
    done
}

printf "Waiting for rendering lock..." 1>&2
(
  flock -x 200
  echo "lock aquired" 1>&2

  case "$1" in
      page)
          shift
          build "$@"
          ;;

      build)
          build untestedSite
          ;;

      test)
          ./static/checkSource
          build wholeSite
          ;;

      push)
          pushToWeb
          ;;

      *)
          echo "
Usage: $0 <build|test|push>

build: Builds the HTML, CSS, etc. of the site. Outputs a directory containing
       the result.

test: Builds the site and runs tests on the result. Outputs a directory
      containing the result.

push: Builds the site and pushes pages to chriswarbo.net over SSH.
          " 1>&2
          exit 1
          ;;
  esac
) 200>/tmp/blog.lock
