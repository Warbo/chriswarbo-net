#!/usr/bin/env bash
set   -e
set   -o pipefail
shopt -s nullglob

if command -v ts > /dev/null && ts | grep queued | grep render > /dev/null
then
    echo "Another render is queued, deferring to that"
    exit 0
fi

# We use a lot of recursion, which can overflow the stack, so try increasing it
ulimit -s 100000 || true

function build() {
    echo "Building '$1'" 1>&2
    nix-build --show-trace -A "$1" static/nix
}

function check() {
    ./static/checkSource 1>&2 || exit 1
    build wholeSite
}

function push() {
    BUCKET="${BUCKET:-www.chriswarbo.net}"

    # Default to building and testing the site; override by passing a path
    # explicitly (e.g. the result of './render build')
    if [[ "$#" -eq 1 ]]
    then
        SITE="$1"
    else
        SITE=$(check)
    fi

    # Sanity check
    echo "Using '$SITE' as site root" 1>&2
    for EXPECTED in index.html projects blog blog.html js css
    do
        [[ -e "$SITE/$EXPECTED" ]] || {
            echo "Given site '$SITE' does not contain '$EXPECTED', aborting"
            exit 1
        } 1>&2
    done

    local args
    # These speed up syncing with S3 (fewer roundtrips, etc.)
    args=(--fast-list --no-update-modtime --checksum)

    # Exclude the /git folder from the sync: without this, sync will try to
    # delete all of the /git/foo folders that exist in S3.
    args+=(--filter '- /git/')

    # Our Nix result is full of symlinks, which must be dereferenced
    args+=(-L)

    echo "Syncing '$SITE' with '$BUCKET'" 1>&2
    RCLONE_S3_REGION=eu-west-1 RCLONE_S3_PROVIDER=AWS  RCLONE_S3_ENV_AUTH=true \
      with-aws-creds \
        rclone sync "${args[@]}" "$SITE" ":s3:$BUCKET"

    # Temporary workaround (as of 2023-07-03...) to redirect chriswarbo.net/git
    # requests to github.com/warbo. We want /git/foo.git to be redirected, but
    # not /git/foo (the human-readable HTML interfaces): to achieve that effect,
    # we just redirect all 404s, so existing objects (like /git/foo) will be
    # served, but non-existing objects (like /git/foo.git, among others) will be
    # redirected.
    # NOTE: We don't use S3's object-based redirects (which use metadata), since
    # those emit 301 PERMANENT redirects, and we want 302 TEMPORARY redirects.
    CONFIG='{
        "IndexDocument": {
            "Suffix": "index.html"
        },
        "RoutingRules": [
            {
                "Condition": {
                    "KeyPrefixEquals": "git/",
                    "HttpErrorCodeReturnedEquals": "404"
                },
                "Redirect": {
                    "HostName": "github.com",
                    "ReplaceKeyPrefixWith": "warbo/"
                }
            }
        ]
    }'

    echo "Redirecting 404s in /git to github.com/warbo" 1>&2
    with-aws-creds aws s3api put-bucket-website \
        --bucket "$BUCKET" \
        --website-configuration "$CONFIG"
}

printf "Waiting for rendering lock..." 1>&2
(
  flock -x 200
  echo "lock aquired" 1>&2

  case "$1" in
      page)
          shift
          build "$@"
          ;;

      build)
          build untestedSite
          ;;

      test)
          check
          ;;

      push)
          shift
          push "$@"
          ;;

      *)
          echo "
Usage: $0 <build|test|push|page>

build: Builds the HTML, CSS, etc. of the site. Outputs a directory containing
       the result.

test: Builds the site and runs tests on the result. Outputs a directory
      containing the result.

push: Push a given site directory to chriswarbo.net. If no argument is given,
      defaults to using the output of 'test'.

page: Build a given attribute of the site, e.g. a page or directory. Requires an
      argument, which is passed to nix-build's -A option.
          " 1>&2
          exit 1
          ;;
  esac
) 200>/tmp/blog.lock
