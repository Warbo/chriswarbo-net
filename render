#! /usr/bin/env nix-shell
#! nix-shell -i bash
mkdir -p rendered; make -j2 -f <(tail -n+4 "$0") "$@"; exit "$?"

# Convert back and forth between source and destination filenames

# rendered/a/b.html -> rendered/a/b -> a/b -> a/b.* -> a/b.md
source   = $(wildcard $(addsuffix .*, $(subst rendered/,,$(basename $1))))

# a/b.md -> a/b -> a/b.html -> rendered/a/b.html
rendered = $(addprefix rendered/, $(addsuffix .html, $(basename $1)))

# Some pages have sub-entries, eg. blog.md has blog/

get_entries = $(call rendered,\
                     $(shell for ENTRY in $1; \
                             do [[ ! -x $$ENTRY ]] || find $$ENTRY -type f;\
                             done))
    entries = $(call get_entries,$(basename $(call source,$1)))

top_level  = $(call rendered,$(shell ls *.md))
all_pages := $(top_level) $(call entries,$(top_level))

# Styling

    css := $(shell find css -type f)
out_css := $(addprefix rendered/, $(css))
    tmp := templates/default.html

# Entry point

all : $(all_pages) $(out_css) $(redirect)

# We use Pandoc, PanPipe and PanHandle to render pages

pd     = pandoc --filter panpipe --filter panhandle --template $(tmp) -o $2 $1
render = $(call pd,$(call source,$1),$1)

# Dependencies of a page

deps = $(call source,$1) $(call entries,$1) $(tmp)

# Use PAGE as a template for rendering every page

# $1 - Target HTML file
# $2 - Dependencies
define PAGE
$1 : $2 $3
	mkdir -p $$(dir $$@)
	$$(call render, $$@)
endef

$(foreach p,$(all_pages),$(eval $(call PAGE,$p,$(call deps,$p))))

# Copy css/* as-is

$(out_css) : css/$(notdir $@)
	mkdir -p rendered/css
	cp css/$(notdir $@) rendered/css/

# Redirect old URLs to their new location

redirect := rendered/index.php

redirect : redirect.html
	$(call pd, redirect.html, rendered/index.php)

## RSS & ATOM

# Extra functionality

clean :
	rm -rf rendered

# Tests

tests := $(addsuffix .pass, $(wildcard tests/*))

test : $(tests)

$(tests) : all
	$(basename $@)

.PHONY : all clean test
