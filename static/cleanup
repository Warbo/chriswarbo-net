#!/usr/bin/env python3

from bs4 import BeautifulSoup
import sys

msg = lambda s: sys.stderr.write(s + "\n")

data = sys.stdin.read()
doc  = BeautifulSoup(data, 'html.parser')

# We used to give tables summaries, specified by a sibling with class "summary"
# html-tidy now complains about this, so just remove them
for summarise in doc.find_all(class_='summarise'):
    for summary in summarise.find_all(class_='summary'):
        highest = summary
        drop    = True
        for parent in summary.parents:
            if drop:
                if parent == summarise:
                    drop = False
                else:
                    highest = parent
        highest.extract()

# Empty <code> elements are left over from running commands with PanPipe.
# Tidy complains about them, so we might as well remove them.
# Remove <code> elements first, then remove any containers (<span>, <p> and
# <pre> elements) which might have contained those <code> elements and are
# subsequently empty.
for tag in ['code', 'pre', 'span', 'p']:
    for e in doc.find_all(tag):
        e.extract() if repr(e) == '<' + tag + '></' + tag + '>' \
        else None

# When we put multiple lines in a document's 'extra_head' (e.g. script tags),
# Pandoc turns the newlines into '¶' for some reason. Tidy spots this, so we
# strip them out here.
import re
for header in doc.find_all('head'):
    odd_paras = header.find_all(string = re.compile('¶'))
    for odd_para in odd_paras:
        odd_para.replace_with(odd_para.replace('¶', ''))

# Tidy doesn't like the ol element's type="1" attribute in XHTML5; remove it,
# since that's the default style anyway
for ol in doc.find_all('ol'):
    if 'type' in ol.attrs and ol['type'] == u'1':
        del(ol['type'])

print(str(doc))
